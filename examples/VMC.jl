"""
Script:AnharmonicOscillator.jl
Author:Djamil Lakhdar-Hamina
Date: 05/04/2023
Description:

"""

using ForwardDiff
using StaticArrays 
using Plots
using LaTeXStrings
import LinearAlgebra:tr,Diagonal

## TODO: replace ansatz with neural network 
## TODO: defensive programming against mismatch in parameter dimension and spatial dimension and hamiltonian
## TODO: optimize VMC 
##          1. make sure gradient function efficient 
##          2. make sure creation and modifcation of mutable structs is efficient  
##          3. make sure calculation of gradient is efficient 
## TODO: fix bugs 
##      1. sometimes result of vmc return NaN 
##      2. sometimes certain wave functions need to be complex 
##      3. sometimes when gradient of energy is evaluated log is negative, so error thrown up
## TODO: write function annotations 

include("../src/QState.jl")
include("../src/MetropolisHastings.jl")
include("../src/Jackknife.jl")

# include("GardientDescent.jl")
e=‚ÑØ
xmin=0.0
xmax=2.0
œµ=1.5 ## chosen because I observed acceptance rates, at this value acceptance is aroujnd 60%
n=1
m=2
tolerance=1e-6
const Œª=0.0
Œ∑=.1
N=1000
iter=500

mag(ùê±::Vector)=sqrt(sum(ùê±.^2))
mag(ùê±::Number)=sqrt(sum(ùê±^2))

rel(x)=x < 0.0 ? 0.0 :  x  
œÉ(x)=rel(x)

‚àá(g::Function,ùê±::Vector,m::Int,n::Int)=ForwardDiff.gradient(g,ùê±)[m:n]
‚àá¬≤(g::Function,ùê±::Vector,m::Int,n::Int)=sum(Diagonal(ForwardDiff.hessian(g,ùê±))[m:n])
Œî(g::Function,ùê±::Vector,m::Int,n::Int)=sum(Diagonal(ForwardDiff.hessian(g,ùê±))[m:n])

œà(ùê±::Vector)=exp(œÉ(ùê±[2]*ùê±[1]+ùê±[3]*ùê±[1])-ùê±[2]*ùê±[1]^2)
œà¬≤(ùê±::Vector)=œà(ùê±)^2
œï(ùê±::Vector)=1/2*ùê±[1]^2+Œª*ùê±[1]^4
HÃÇ(ùê±::Vector, œà::Function,m::Int,n::Int)=-‚àá¬≤(œà,ùê±,m,n)/2+œï(ùê±)*œà(ùê±)
Œµ‚ÇÄ(ùê±::Vector,œà::Function,m::Int,n::Int)=œà(ùê±)^-1*HÃÇ(ùê±,œà,m,n) ## ground state energy 

function EÃÑ(ùê±::Matrix,Œ∏::Vector, œà::Function,m::Int,n::Int)
    N=length(ùê±)
    sum_=0
    for i in 1:N
        sum_+=Œµ‚ÇÄ([ùê±[i]])
    end 
    1/N*sum_
end 

## gradient of energy 
function Œîœµ(œà::Function, HÃÇ::Function, Œµ‚ÇÄ::Function, N::Integer,QState::MutQParams) 

    """

    Œîœµ(œµ::Float64,xmin::Float64,xmax::Float64,iterations::Int64,P::Function)::Array{Float64}

    """
    ùí™=zeros(3,QState.m) ## expected values 
    @simd for i in 1:N
        log‚àá=‚àá(ùê±->log(œà(ùê±)),[QState.ùê´[i];QState.Œò],QState.n+1,QState.n+QState.m)
        @inbounds ùí™[1,:]+=1/œà([QState.ùê´[i];QState.Œò])*log‚àá*HÃÇ([QState.ùê´[i];QState.Œò],œà,1,QState.n)
        @inbounds ùí™[2,1]+=Œµ‚ÇÄ([QState.ùê´[i];QState.Œò],œà,1,QState.n)
        @inbounds ùí™[3,:]+=log‚àá
    end 
    return 2*ùí™[1,:]/N-2*ùí™[2,1]/N*ùí™[3,:]/N
end 


function vmc(n::Number,m::Number,N::Number,Œ∑::Number,iterations::Int,tolerance::Number,œà¬≤::Function,HÃÇ::Function,Œµ‚ÇÄ::Function)

    """

    vmc(N::Number,Œ∏::QParams,Œ∑::NUmber,iterations::Int,tolerance::Number,œà¬≤::Function,HÃÇ::Function,Œµ‚ÇÄ::Function)

    Examples
    ‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°

    julia> f(x::Real)=‚ÑØ^-x^2
    julia> metropolis_hastings(.1, -2.0,-1.0,10000,f)
    

    """

    if n<1 || n>3 
        ArgumentError("n, spatial dimensionality, must be between 1-3")
    end 

    i=1
    QState=MutQParams(n,m,zeros(N,n),rand(m)) ## randomnly initialize parameter vector
    while i<iterations
        QState.ùê´=metropolis_hastings(n,œµ,xmin,xmax,N,QState.Œò,œà¬≤)
        loss=Œîœµ(œà,HÃÇ,Œµ‚ÇÄ,N,QState)
        QState.Œò=QState.Œò.-Œ∑*loss
        if mag(loss)<tolerance
            break
        end 
        i+=1
    end 
    return QState
end 

# function stochastic_vmc(n::Number,m::Number,N::Number,sample::Int,Œ∑::Number,iterations::Int,tolerance::Number,œà¬≤,HÃÇ,Œµ‚ÇÄ)

#     """

#     vmc(N::Number,Œ∏::QParams,Œ∑::NUmber,iterations::Int,tolerance::Number,œà¬≤::Function,HÃÇ::Function,Œµ‚ÇÄ::Function)
    

#     Examples
#     ‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°

#     julia> f(x::Real)=‚ÑØ^-x^2
#     julia> metropolis_hastings(.1, -2.0,-1.0,10000,f)
    

#     """

#     if n<1 || n>3 
#         ArgumentError("n, spatial dimensionality, must be between 1-3")
#     end 

#     i=0
#     QState=MutQParams(n,Œ©(zeros(N,1)),Œò(rand(m)))
#     while i<iterations
#         QState.ùê´=metropolis_hastings(œµ,xmin,xmax,sample,QState.Œò.Œ∏,œà¬≤)
#         loss=Œîœµ(œà,HÃÇ,Œµ‚ÇÄ,N,QState)
#         QState.Œ∏=QState.Œ∏-Œ∑*loss
#         if abs(loss)<tolerance
#             break
#         end 
#         i+=1
#     end 
#     return QState
# end 

# function run_test(Œªs,œà¬≤,HÃÇ,Œµ‚ÇÄ,n,m)
#     temp=Array{Tuple{Float64, Float64}}(undef, length(Œªs))
#     for i in eachindex(Œªs) 
#         global Œª=Œªs[i]
#         Qstate=vmc(n,m,N,Œ∑,iter,tolerance,œà¬≤,HÃÇ,Œµ‚ÇÄ)
#         temp[i]=jackknife(Qstate.ùê´[:,1],Qstate.Œò,Œµ‚ÇÄ,(œà,1,1))
#     end 
#     return temp 
# end 

# Œõ=collect(0:.002:.05)
# analytic=anharmonic_oscillator.(Œõ)


## with multiple nodes 
rs=[]
E=[]
œàs=[]

ground_state=[1/sqrt(2)*(1/pi)^(1/4)*exp(-(x/2)^2) for x in collect(-3.5:.1:3.5)]

œà(ùê±::Vector)=exp(œÉ(ùê±[2]*ùê±[1]+ùê±[3])-ùê±[2]*ùê±[1]^2)
œà¬≤(ùê±::Vector)=œà(ùê±)^2

qstate=vmc(n,m,N,Œ∑,iter,1e-4,œà¬≤,HÃÇ,Œµ‚ÇÄ)
push!(rs,sort(qstate.ùê´[:,1]))
push!(E,jackknife(qstate.ùê´[:,1],qstate.Œò,Œµ‚ÇÄ,(œà,1,1)))
push!(œàs,[œà([rs[1][i];qstate.Œò]) for i in 1:N ])

œà(ùê±::Vector)=exp(œÉ(ùê±[2]*ùê±[1]+ùê±[3]+ùê±[4]*ùê±[1]+ùê±[5])-ùê±[2]*ùê±[1]^2)
œà¬≤(ùê±::Vector)=œà(ùê±)^2

qstate=vmc(n,4,N,Œ∑,iter,1e-4,œà¬≤,HÃÇ,Œµ‚ÇÄ)
push!(rs,sort(qstate.ùê´[:,1]))
push!(E,jackknife(qstate.ùê´[:,1],qstate.Œò,Œµ‚ÇÄ,(œà,1,1)))
push!(œàs,[œà([rs[2][i];qstate.Œò]) for i in 1:N ])

œà(ùê±::Vector)=exp(œÉ(ùê±[2]*ùê±[1]+ùê±[3]+ùê±[4]*ùê±[1]+ùê±[5]+ùê±[6]*ùê±[1]+ùê±[5])-ùê±[2]*ùê±[1]^2)
œà¬≤(ùê±::Vector)=œà(ùê±)^2

qstate=vmc(n,6,N,Œ∑,iter,1e-4,œà¬≤,HÃÇ,Œµ‚ÇÄ)
push!(rs,sort(qstate.ùê´[:,1]))
push!(E,jackknife(qstate.ùê´[:,1],qstate.Œò,Œµ‚ÇÄ,(œà,1,1)))
push!(œàs,[œà([rs[3][i];qstate.Œò]) for i in 1:N ])


plot(collect(-3.5:.1:3.5),ground_state,label=L"Analytic:(\frac{2}{\pi})^{1/4}e^{x/2^2} ",size=(1000,500))

plot!(rs[1],œàs[1]./(2*maximum(œàs[1])),label="One-Node, One-Layer",size=(1000,500))
plot!(rs[2],œàs[2]./(2*maximum(œàs[2])),label="Two-Node, One-Layer")
plot!(rs[3],œàs[3]./(2*maximum(œàs[3])),label="Three-Node, One-Layer")
title!("Ans√§tze Eigenstates of Harmonic Oscillator: Single-Layer Multi-Node Normalized Neural Networks")
xlabel!(L"\bf{x}(a.u.)")
ylabel!(L"\psi(\bf{x})")
annotate!(-1.5,8,L"iterations=500")
annotate!(-1.5,7.5,L"samples=1000")
annotate!(-1.5, 7.0, L"\eta=.1")


## with multiple layers 
œà(ùê±::Vector)=exp(œÉ(ùê±[2]*ùê±[1]+ùê±[3])-ùê±[2]*ùê±[1]^2)
œà¬≤(ùê±::Vector)=œà(ùê±)^2

qstate=vmc(n,m,N,Œ∑,iter,1e-4,œà¬≤,HÃÇ,Œµ‚ÇÄ)
push!(rs,sort(qstate.ùê´[:,1]))
push!(E,jackknife(qstate.ùê´[:,1],qstate.Œò,Œµ‚ÇÄ,(œà,1,1)))
push!(œàs,[œà([rs[4][i];qstate.Œò]) for i in 1:N ])

œà(ùê±::Vector)=exp(œÉ(œÉ(ùê±[2]*ùê±[1]+ùê±[3])+ùê±[4])-ùê±[2]*ùê±[1]^2)
œà¬≤(ùê±::Vector)=œà(ùê±)^2

qstate=vmc(n,3,N,Œ∑,iter,1e-4,œà¬≤,HÃÇ,Œµ‚ÇÄ)
push!(rs,sort(qstate.ùê´[:,1]))
push!(E,jackknife(qstate.ùê´[:,1],qstate.Œò,Œµ‚ÇÄ,(œà,1,1)))
push!(œàs,[œà([rs[5][i];qstate.Œò]) for i in 1:N ])

œà(ùê±::Vector)=exp(œÉ(œÉ(œÉ(ùê±[2]*ùê±[1]+ùê±[3])+ùê±[4])+ùê±[5])-ùê±[2]*ùê±[1]^2)
œà¬≤(ùê±::Vector)=œà(ùê±)^2

qstate=vmc(n,4,N,Œ∑,iter,1e-4,œà¬≤,HÃÇ,Œµ‚ÇÄ)
push!(rs,sort(qstate.ùê´[:,1]))
push!(E,jackknife(qstate.ùê´[:,1],qstate.Œò,Œµ‚ÇÄ,(œà,1,1)))
push!(œàs,[œà([rs[6][i];qstate.Œò]) for i in 1:N ])

plot(collect(-3.5:.1:3.5),ground_state,label=L"Analytic:(\frac{2}{\pi})^{1/4}e^{x/2^2} ",size=(1000,500))

# plot!(rs[4],œàs[4]./(2*maximum(œàs[4])),label="One-Node, One-Layer",size=(1000,500))
# plot!(rs[5],œàs[5]./(2*maximum(œàs[5])),label="One-Node, Two-Layer")
# plot!(rs[6],œàs[6]./(2*maximum(œàs[6])),label="One-Node, Three-Layer")
# title!("Ans√§tze Eigenstates of Harmonic Oscillator: Single-Node Multi-Layer Normalized Neural Networks")
# xlabel!(L"\bf{x}(a.u.)")
# ylabel!(L"\psi(\bf{x})")
# annotate!(-1.5,8,L"iterations=500")
# annotate!(-1.5,7.5,L"samples=1000")
# annotate!(-1.5, 7.0, L"\eta=.1")
